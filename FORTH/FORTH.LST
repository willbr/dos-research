     1                                  org 0x0100
     2                                  
     3                                  key_esc:       equ 0x1b
     4                                  key_backspace: equ 0x08
     5                                  key_enter:     equ 0x0d
     6                                  ascii_bell:    equ 0x07
     7                                  ascii_lf:      equ 0x0a
     8                                  ascii_cr:      equ 0x0d
     9                                  
    10                                  section .data
    11 00000000 0568656C6C6F               welcome_message db 5, "hello"
    12 00000006 023B20                     prompt db 2, "; "
    13                                  
    14                                  section .bss
    15 00000000 <res FFh>                  line_buffer resb 0xff
    16                                  
    17                                  section .text
    18                                  
    19                                  start:
    20 00000000 BE[0000]                   mov si, welcome_message
    21 00000003 E86400                     call puts
    22 00000006 E87100                     call newline
    23                                     ;int 0x20
    24                                  
    25 00000009 BE[0600]                   mov si, prompt
    26 0000000C E85B00                     call puts
    27                                  
    28 0000000F BF[0000]                   mov di, line_buffer
    29 00000012 E80B00                     call readline
    30                                  
    31 00000015 E86200                     call newline
    32                                  
    33 00000018 BE[0000]                   mov si, line_buffer
    34 0000001B E84C00                     call puts
    35                                  
    36 0000001E CD20                       int 0x20
    37                                  
    38                                  
    39                                     ; di = dst address
    40                                     ; cx = line length ; can I remove cx? and use length = (si - pop si)?
    41                                  readline:
    42 00000020 B90000                     mov cx, 0
    43 00000023 57                         push di
    44 00000024 47                         inc di
    45                                  
    46                                  .loop:
    47 00000025 B400                       mov ah, 0x00
    48 00000027 CD16                       int 0x16              ; read key
    49                                  
    50 00000029 3C1B                       cmp al, key_esc       ; if esc return
    51 0000002B 7431                       je .calc_length
    52                                  
    53 0000002D 3C08                       cmp al, key_backspace
    54 0000002F 7516                       jne .other_chars
    55                                  
    56 00000031 83F900                     cmp cx, 0
    57 00000034 741C                       je .underflow
    58                                  
    59                                     ; todo check for overflow
    60                                  
    61 00000036 49                         dec cx
    62 00000037 4F                         dec di
    63                                  
    64 00000038 E82700                     call putchar
    65 0000003B B020                       mov al, ' '
    66 0000003D E82200                     call putchar
    67 00000040 B008                       mov al, key_backspace
    68 00000042 E81D00                     call putchar
    69 00000045 EBDE                       jmp .loop
    70                                  
    71                                  .other_chars:
    72 00000047 41                         inc cx
    73 00000048 AA                         stosb
    74                                  
    75 00000049 3C0D                       cmp al, key_enter
    76 0000004B 7411                       je .calc_length
    77                                  
    78 0000004D E81200                     call putchar
    79 00000050 EBD3                       jmp .loop
    80                                  
    81                                  .underflow:
    82 00000052 B007                       mov al, ascii_bell
    83 00000054 E80B00                     call putchar
    84 00000057 B008                       mov al, key_backspace
    85 00000059 E80600                     call putchar
    86 0000005C EBC7                       jmp .loop
    87                                  
    88                                  .calc_length:
    89 0000005E 5F                         pop di
    90 0000005F 880D                       mov [di], cl
    91 00000061 C3                         ret
    92                                  
    93                                  putchar:
    94 00000062 B40E                       mov ah, 0x0e
    95 00000064 BB0F00                     mov bx, 0x000f
    96 00000067 CD10                       int 0x10
    97 00000069 C3                         ret
    98                                  
    99                                  puts:
   100 0000006A 31C9                       xor cx, cx
   101 0000006C 8A0C                       mov cl, [si] ; read string length
   102 0000006E 46                         inc si
   103                                  
   104 0000006F B40E                       mov ah, 0x0e
   105 00000071 BB0F00                     mov bx, 0x000f
   106                                  .puts_loop:
   107 00000074 AC                         lodsb
   108 00000075 CD10                       int 0x10
   109 00000077 E2FB                       loop .puts_loop
   110 00000079 C3                         ret
   111                                  
   112                                  
   113                                  newline:
   114 0000007A B00A                       mov al, ascii_lf
   115 0000007C E8E3FF                     call putchar
   116 0000007F B00D                       mov al, ascii_cr
   117 00000081 E8DEFF                     call putchar
   118 00000084 C3                         ret
   119                                  
