     1                                  ; boot rouge
     2                                  ; by Oscar Toledo G
     3                                  
     4                                  
     5                                  cpu 8086
     6                                  
     7                                  row_width:      equ 0x00a0
     8                                  box_max_width:  equ 23
     9                                  box_max_height: equ 6
    10                                  box_width:      equ 26
    11                                  box_height:     equ 8
    12                                  
    13                                  light_color: equ 0x06
    14                                  hero_color:  equ 0x0e
    15                                  
    16                                  gr_vert:       equ 0xba
    17                                  gr_top_right:  equ 0xbb
    18                                  gr_bot_right:  equ 0xbc
    19                                  gr_bot_left:   equ 0xc8
    20                                  gr_top_left:   equ 0xc9
    21                                  gr_horiz:      equ 0xcd
    22                                  
    23                                  gr_tunnel: equ 0xb1
    24                                  gr_door:   equ 0xce
    25                                  gr_floor:  equ 0xfa
    26                                  
    27                                  gr_hero:   equ 0x01
    28                                  
    29                                  gr_ladder: equ 0xf0
    30                                  gr_trap:   equ 0x04
    31                                  gr_food:   equ 0x05
    32                                  gr_armor:  equ 0x08
    33                                  gr_yendor: equ 0x0c
    34                                  gr_gold:   equ 0x0f
    35                                  gr_weapon: equ 0x18
    36                                  
    37                                  yendor_level: equ 26
    38                                  
    39                                  
    40                                  
    41                                  com_file: equ 0x01
    42                                  
    43                                  %ifdef com_file
    44                                  	org 0x0100
    45                                  %else
    46                                  	org 0x7c00
    47                                  %endif
    48                                  
    49                                  rnd:    equ 0x0008
    50                                  starve: equ 0x0006
    51                                  hp:     equ 0x0004
    52                                  level:  equ 0x0003
    53                                  yendor: equ 0x0002
    54                                  armor:  equ 0x0001
    55                                  weapon: equ 0x0000
    56                                  
    57                                  
    58                                  
    59                                  start:
    60 00000000 E540                    	in ax, 0x40
    61 00000002 50                      	push ax
    62 00000003 B81000                  	mov ax, 16
    63 00000006 50                      	push ax
    64 00000007 50                      	push ax
    65 00000008 B001                    	mov al, 1
    66 0000000A 50                      	push ax
    67 0000000B 50                      	push ax
    68 0000000C 40                      	inc ax
    69 0000000D CD10                    	int 0x10
    70 0000000F B800B8                  	mov ax, 0xb800
    71 00000012 8ED8                    	mov ds, ax
    72 00000014 8EC0                    	mov es, ax
    73                                  
    74 00000016 BE[E301]                	mov si, random
    75 00000019 FFD6                    	call si
    76                                  
    77 0000001B 89E5                    	mov bp, sp
    78                                  
    79                                  generate_dungeon:
    80 0000001D 8A5E02                  	mov bl, [bp+yendor]
    81 00000020 005E03                  	add [bp+level], bl
    82                                  %ifdef com_file
    83                                  	jne .0
    84                                  	jmp quit
    85                                  .0:
    86                                  %else
    87 00000023 74FE                    	je $
    88                                  %endif
    89                                  
    90                                  ; select a maze for the dungeon
    91                                  
    92 00000025 8B4608                  	mov ax, [bp+rnd]
    93 00000028 258241                  	and ax, 0x4182
    94 0000002B 0D6D1A                  	or ax, 0x1a6d
    95 0000002E 92                      	xchg ax, dx
    96                                  
    97                                  	; clear the screen to black over black
    98 0000002F 31C0                    	xor ax, ax
    99 00000031 31FF                    	xor di, di
   100 00000033 B508                    	mov ch, 0x08
   101                                  	;rep stosw
   102                                  
   103                                  
   104                                  	; draw the nine rooms
   105                                  .7:
   106 00000035 50                      	push ax
   107 00000036 E80701                  	call fill_room
   108 00000039 58                      	pop ax
   109 0000003A 83C034                  	add ax, box_width*2
   110 0000003D 3C9C                    	cmp al, 0x9c
   111 0000003F 7503                    	jne .6
   112                                  
   113 00000041 056404                  	add ax, row_width*box_height-box_width*3*2
   114                                  .6:
   115 00000044 3D000F                  	cmp ax, row_width*box_height*3
   116 00000047 72EC                    	jb .7
   117                                  
   118                                  	; put the ladder at a random corner room
   119 00000049 D16608                  	shl word [bp+rnd], 1
   120 0000004C B8F801                  	mov ax, 3*row_width+12*2
   121 0000004F BBF80B                  	mov bx, 19*row_width+12*2
   122 00000052 7301                    	jnc .2
   123 00000054 93                      	xchg ax, bx
   124                                  .2:
   125 00000055 7903                    	jns .8
   126 00000057 83C068                  	add ax, box_width*2*2
   127                                  .8:
   128 0000005A 97                      	xchg ax, di
   129 0000005B C605F0                  	mov byte [di], gr_ladder
   130                                  
   131                                  
   132                                  	; put the amulet of yendor
   133                                  
   134 0000005E 807E031A                	cmp byte [bp+level], yendor_level
   135 00000062 7203                    	jb .1
   136 00000064 C6070C                  	mov byte [bx], gr_yendor
   137                                  
   138                                  
   139                                  .1:
   140                                  	; setup hero start
   141                                  
   142 00000067 BF2C07                  	mov di, 11*row_width+38*2
   143                                  
   144                                  	; main game loop
   145                                  
   146                                  game_loop:
   147 0000006A B8[6A00]                	mov ax, game_loop
   148 0000006D 50                      	push ax
   149                                  
   150                                  
   151                                  	; circle of light
   152 0000006E BB0500                  	mov bx, 0x0005
   153                                  .1:
   154 00000071 4B                      	dec bx
   155 00000072 4B                      	dec bx
   156 00000073 B006                    	mov al, light_color
   157 00000075 888160FF                	mov [bx+di-row_width], al
   158 00000079 8801                    	mov [bx+di], al
   159 0000007B 8881A000                	mov [bx+di+row_width], al
   160 0000007F 79F0                    	jns .1
   161                                  
   162                                  	; show our hero
   163 00000081 FF35                    	push word [di]
   164 00000083 C705010E                	mov word [di], hero_color*256+gr_hero
   165 00000087 80460602                	add byte [bp+starve], 2
   166 0000008B 19C0                    	sbb ax, ax
   167 0000008D E86400                  	call add_hp
   168                                  	;mov ah, 0x00
   169 00000090 CD16                    	int 0x16
   170 00000092 8F05                    	pop word [di]
   171                                  
   172 00000094 88E0                    	mov al, ah
   173                                  
   174                                  %ifdef com_file
   175                                  	cmp al, 0x01
   176                                  	je quit
   177                                  %endif
   178                                  
   179 00000096 2C4C                    	sub al, 0x4c
   180 00000098 B402                    	mov ah, 0x02
   181 0000009A 3CFF                    	cmp al, 0xff
   182 0000009C 740E                    	je .2
   183 0000009E 3C01                    	cmp al, 0x01
   184 000000A0 740A                    	je .2
   185 000000A2 3CFC                    	cmp al, 0xfc
   186 000000A4 7404                    	je .3
   187 000000A6 3C04                    	cmp al, 0x04
   188 000000A8 7537                    	jne move_cancel
   189                                  .3:
   190 000000AA B428                    	mov ah, 0x28
   191                                  .2:
   192 000000AC F6EC                    	imul ah
   193                                  
   194 000000AE 93                      	xchg ax, bx
   195 000000AF 8A01                    	mov al, [di+bx]
   196                                  
   197                                  
   198 000000B1 3CF0                    	cmp al, gr_ladder
   199 000000B3 742D                    	je ladder_found
   200                                  
   201 000000B5 3CCE                    	cmp al, gr_door
   202 000000B7 7304                    	jnc .4
   203                                  
   204 000000B9 3CB1                    	cmp al, gr_tunnel
   205 000000BB 7724                    	ja move_cancel
   206                                  .4:
   207 000000BD 3C04                    	cmp al, gr_trap
   208 000000BF 7220                    	jb move_cancel
   209                                  	; move player
   210 000000C1 8D39                    	lea di, [di+bx]
   211 000000C3 B706                    	mov bh, 0x06
   212 000000C5 7426                    	je trap_found
   213                                  
   214                                  
   215 000000C7 3CB1                    	cmp al, gr_tunnel
   216 000000C9 7316                    	jnc move_cancel
   217                                  
   218 000000CB 3C18                    	cmp al, gr_weapon
   219 000000CD 774D                    	ja battle
   220                                  	; only items at this part of code, so clean floor
   221 000000CF C605FA                  	mov byte [di], gr_floor
   222                                  
   223 000000D2 7415                    	je weapon_found
   224                                  
   225                                  	; 4 things to look for
   226 000000D4 3C08                    	cmp al, gr_armor
   227 000000D6 740D                    	je armor_found
   228 000000D8 7218                    	jb food_found
   229                                  	; 2 things to look for
   230 000000DA 3C0F                    	cmp al, gr_gold
   231 000000DC 7403                    	je move_cancel
   232                                  	; at this point 'al' can only be gr_yendor
   233                                  	; Amulet of Yendor found!
   234 000000DE F65E02                  	neg byte [bp+yendor]
   235                                  move_cancel:
   236 000000E1 C3                      	ret
   237                                  
   238                                  
   239                                  	%ifdef com_file
   240                                  quit:
   241                                  	int 0x20
   242                                  	%endif
   243                                  
   244                                  ladder_found:
   245 000000E2 E938FF                  	jmp generate_dungeon
   246                                  
   247                                  armor_found:
   248 000000E5 FE4601                  	inc byte [bp+armor]
   249 000000E8 C3                      	ret
   250                                  
   251                                  weapon_found:
   252 000000E9 FE4600                  	inc byte [bp+weapon]
   253 000000EC C3                      	ret
   254                                  
   255                                  	; Aaaarghhhh!
   256                                  trap_found:
   257 000000ED FFD6                    	call si
   258                                  sub_hp:
   259 000000EF F7D8                    	neg ax
   260 000000F1 BB                      	db 0xbb
   261                                  
   262                                  food_found:
   263 000000F2 FFD6                    	call si
   264                                  add_hp:
   265 000000F4 034604                  	add ax, [bp+hp]
   266                                  %ifdef com_file
   267                                  	js quit
   268                                  %else
   269 000000F7 78FE                    	js $
   270                                  %endif
   271 000000F9 894604                  	mov [bp+hp], ax
   272                                  
   273                                  
   274                                  	; update screen indicator
   275                                  
   276 000000FC BB980F                  	mov bx, 0xf98
   277 000000FF E80300                  	call .1
   278                                  %ifdef com_file
   279                                  	mov al, [bp+weapon]
   280                                  	call .1
   281                                  	mov al, [bp+armor]
   282                                  	call .1
   283                                  %endif
   284                                  
   285 00000102 8A4603                  	mov al, [bp+level]
   286                                  .1:
   287 00000105 31C9                    	xor cx, cx
   288                                  .2:
   289 00000107 41                      	inc cx
   290 00000108 83E80A                  	sub ax, 10
   291 0000010B 73FA                    	jnc .2
   292 0000010D 053A0A                  	add ax, 0x0a3a
   293 00000110 E80400                  	call .3
   294 00000113 91                      	xchg ax, cx
   295 00000114 48                      	dec ax
   296 00000115 75EE                    	jnz .1
   297                                  
   298                                  .3:
   299 00000117 8907                    	mov [bx], ax
   300 00000119 4B                      	dec bx
   301 0000011A 4B                      	dec bx
   302 0000011B C3                      	ret
   303                                  
   304                                  battle:
   305 0000011C 241F                    	and al, 0x1f
   306 0000011E D0E0                    	shl al, 1
   307 00000120 88C4                    	mov ah, al
   308 00000122 92                      	xchg ax, dx
   309                                  
   310                                  	; Player's attack
   311                                  .2:
   312 00000123 8A7E00                  	mov bh, [bp+weapon]
   313 00000126 FFD6                    	call si
   314 00000128 28C6                    	sub dh, al
   315 0000012A 7210                    	jc .3
   316                                  
   317                                  	; Monster's attack
   318 0000012C 88D7                    	mov bh, dl
   319 0000012E FFD6                    	call si
   320 00000130 2A4601                  	sub al, [bp+armor]
   321 00000133 7203                    	jc .4
   322 00000135 E8B7FF                  	call sub_hp
   323                                  .4:
   324                                  	; mov ah, 0x00
   325 00000138 CD16                    	int 0x16
   326 0000013A EBE7                    	jmp .2
   327                                  
   328                                  	; monster is dead
   329                                  .3:
   330 0000013C C605FA                  	mov byte [di], gr_floor
   331 0000013F C3                      	ret
   332                                  
   333                                  fill_room:
   334 00000140 05FA01                  	add ax, (box_height/2-1)*row_width+(box_width/2)*2
   335 00000143 50                      	push ax
   336 00000144 97                      	xchg ax, di
   337 00000145 D1EA                    	shr dx, 1
   338 00000147 B8B100                  	mov ax, 0x0000+gr_tunnel
   339 0000014A B91A00                  	mov cx, box_width
   340 0000014D 7302                    	jnc .3
   341 0000014F 57                      	push di
   342                                  	;rep stosw
   343 00000150 5F                      	pop di
   344                                  .3:
   345                                  
   346 00000151 D1EA                    	shr dx, 1
   347 00000153 7309                    	jnc .5
   348 00000155 B108                    	mov cl, box_height
   349                                  .4:
   350 00000157 AA                      	stosb
   351 00000158 81C79F00                	add di, row_width-1
   352 0000015C E2F9                    	loop .4
   353                                  
   354                                  .5:
   355 0000015E B715                    	mov bh, box_max_width - 2
   356 00000160 FFD6                    	call si
   357 00000162 91                      	xchg ax, cx
   358 00000163 B704                    	mov bh, box_max_height - 2
   359 00000165 FFD6                    	call si
   360 00000167 88C5                    	mov ch, al
   361 00000169 D0E8                    	shr al, 1
   362 0000016B 40                      	inc ax
   363 0000016C B4A0                    	mov ah, row_width
   364 0000016E F6E4                    	mul ah
   365 00000170 01C8                    	add ax, cx
   366 00000172 28EC                    	sub ah, ch
   367 00000174 24FE                    	and al, 0xfe
   368 00000176 0404                    	add al, 0x04
   369 00000178 5F                      	pop di
   370 00000179 29C7                    	sub di, ax
   371                                  
   372 0000017B B0C9                    	mov al, gr_top_left
   373 0000017D BBCDBB                  	mov bx, gr_top_right * 256 + gr_horiz
   374 00000180 E81100                  	call fill
   375                                  .9:
   376 00000183 B0BA                    	mov al, gr_vert
   377 00000185 BBFABA                  	mov bx, gr_vert * 256 + gr_floor
   378 00000188 E80900                  	call fill
   379 0000018B FECD                    	dec ch
   380 0000018D 79F4                    	jns .9
   381 0000018F B0C8                    	mov al, gr_bot_left
   382 00000191 BBCDBC                  	mov bx, gr_bot_right * 256 + gr_horiz
   383                                  
   384                                  	; fill a row on screen for a room
   385                                  fill:
   386 00000194 51                      	push cx
   387 00000195 57                      	push di
   388 00000196 E81500                  	call door
   389                                  .1:
   390 00000199 88D8                    	mov al, bl
   391 0000019B E81000                  	call door
   392 0000019E FEC9                    	dec cl
   393 000001A0 79F7                    	jns .1
   394 000001A2 88F8                    	mov al, bh
   395 000001A4 E80700                  	call door
   396 000001A7 5F                      	pop di
   397 000001A8 59                      	pop cx
   398 000001A9 81C7A000                	add di, 0x00a0
   399 000001AD C3                      	ret
   400                                  
   401                                  	; draw a room character on screen
   402                                  door:
   403 000001AE 3CFA                    	cmp al, gr_floor
   404 000001B0 751F                    	jne .3
   405 000001B2 FFD6                    	call si
   406 000001B4 3C06                    	cmp al, 6
   407 000001B6 730D                    	jnc .11
   408 000001B8 024603                  	add al, [bp+level]
   409                                  .9:
   410 000001BB 2C05                    	sub al, 0x05
   411 000001BD 3C17                    	cmp al, 0x17
   412 000001BF 7DFA                    	jge .9
   413 000001C1 0444                    	add al, 0x44
   414 000001C3 EB0C                    	jmp short .12
   415                                  
   416                                  .11:
   417 000001C5 3C0B                    	cmp al, 11
   418 000001C7 93                      	xchg ax, bx
   419 000001C8 2E8A580D                	cs mov bl, [si+bx+(items-random-6)]
   420 000001CC 93                      	xchg ax, bx
   421 000001CD 7202                    	jb .12
   422 000001CF B0FA                    	mov al, gr_floor
   423                                  .12:
   424                                  
   425                                  .3:
   426 000001D1 3CCD                    	cmp al, gr_horiz
   427 000001D3 7404                    	je .1
   428 000001D5 3CBA                    	cmp al, gr_vert
   429 000001D7 7507                    	jne .2
   430                                  .1:
   431 000001D9 803DB1                  	cmp byte [di], gr_tunnel
   432 000001DC 7502                    	jne .2
   433 000001DE B0CE                    	mov al, gr_door
   434                                  .2:
   435 000001E0 AA                      	stosb
   436 000001E1 47                      	inc di
   437 000001E2 C3                      	ret
   438                                  
   439                                  random:
   440 000001E3 B0FB                    	mov al, 251
   441 000001E5 F66608                  	mul byte [bp+rnd]
   442 000001E8 0453                    	add al, 83
   443 000001EA 894608                  	mov [bp+rnd], ax
   444                                  
   445                                  	; rdtsc ; would make it dependent on Pentium II
   446                                  	; in al, (0x40) ; Only works for slow requirements
   447                                  
   448 000001ED 30E4                    	xor ah, ah
   449 000001EF F6F7                    	div bh
   450 000001F1 88E0                    	mov al, ah
   451 000001F3 98                      	cbw
   452 000001F4 40                      	inc ax,
   453 000001F5 C3                      	ret
   454                                  
   455                                  
   456                                  items:
   457 000001F6 05                      	db gr_food
   458 000001F7 0F                      	db gr_gold
   459 000001F8 04                      	db gr_trap
   460 000001F9 18                      	db gr_weapon
   461 000001FA 08                      	db gr_armor
   462                                  
   463                                  %ifdef com_file
   464                                  %else
   465                                  	;times 510-($-$$) db 0x4f
   466                                  	;db 0x55, 0xaa                ; make it a bootable sector
   467                                  %endif
   468                                  
